import { resolveDirective as _resolveDirective } from "vue";
import { createVNode as _createVNode } from "vue";
import _extends from "@babel/runtime/helpers/esm/extends";
import { watch, reactive } from 'vue'; // Utils

import { createNamespace } from '../utils';
import { isMobile } from '../utils/validate/mobile'; // Components

import Cell from '../cell';
import Form from '../form';
import Field from '../field';
import Button from '../button';
import Dialog from '../dialog';
import Switch from '../switch';

var _createNamespace = createNamespace('contact-edit'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1],
    t = _createNamespace[2];

var DEFAULT_CONTACT = {
  tel: '',
  name: ''
};
export default createComponent({
  props: {
    isEdit: Boolean,
    isSaving: Boolean,
    isDeleting: Boolean,
    showSetDefault: Boolean,
    setDefaultLabel: String,
    contactInfo: {
      type: Object,
      default: function _default() {
        return _extends({}, DEFAULT_CONTACT);
      }
    },
    telValidator: {
      type: Function,
      default: isMobile
    }
  },
  emits: ['save', 'delete', 'change-default'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var contact = reactive(_extends({}, DEFAULT_CONTACT, props.contactInfo));

    var onSave = function onSave() {
      if (!props.isSaving) {
        emit('save', contact);
      }
    };

    var onDelete = function onDelete() {
      Dialog.confirm({
        title: t('confirmDelete')
      }).then(function () {
        emit('delete', contact);
      });
    };

    var renderButtons = function renderButtons() {
      return _createVNode("div", {
        "class": bem('buttons')
      }, [_createVNode(Button, {
        "block": true,
        "round": true,
        "type": "danger",
        "text": t('save'),
        "loading": props.isSaving,
        "nativeType": "submit"
      }, null), props.isEdit && _createVNode(Button, {
        "block": true,
        "round": true,
        "text": t('delete'),
        "loading": props.isDeleting,
        "onClick": onDelete
      }, null)]);
    };

    var renderSwitch = function renderSwitch() {
      return _createVNode(Switch, {
        "modelValue": contact.isDefault,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return contact.isDefault = $event;
        },
        "size": 24,
        "onChange": function onChange(event) {
          emit('change-default', event);
        }
      }, null);
    };

    var renderSetDefault = function renderSetDefault() {
      if (props.showSetDefault) {
        return _createVNode(Cell, {
          "title": props.setDefaultLabel,
          "class": bem('switch-cell'),
          "border": false
        }, {
          'right-icon': renderSwitch
        });
      }
    };

    watch(function () {
      return props.contactInfo;
    }, function (value) {
      _extends(contact, DEFAULT_CONTACT, value);
    });
    return function () {
      return _createVNode(Form, {
        "class": bem(),
        "onSubmit": onSave
      }, {
        default: function _default() {
          return [_createVNode("div", {
            "class": bem('fields')
          }, [_createVNode(Field, {
            "modelValue": contact.name,
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return contact.name = $event;
            },
            "clearable": true,
            "label": t('name'),
            "rules": [{
              required: true,
              message: t('nameInvalid')
            }],
            "maxlength": "30",
            "placeholder": t('nameEmpty')
          }, null), _createVNode(Field, {
            "modelValue": contact.tel,
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return contact.tel = $event;
            },
            "clearable": true,
            "type": "tel",
            "label": t('tel'),
            "rules": [{
              validator: props.telValidator,
              message: t('telInvalid')
            }],
            "placeholder": t('telEmpty')
          }, null)]), renderSetDefault(), renderButtons()];
        }
      });
    };
  }
});