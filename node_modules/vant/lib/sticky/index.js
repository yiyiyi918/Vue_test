"use strict";

exports.__esModule = true;
exports.default = void 0;

var _vue = require("vue");

var _utils = require("../utils");

var _use = require("@vant/use");

var _useVisibilityChange = require("../composables/use-visibility-change");

// Utils
// Composition
var _createNamespace = (0, _utils.createNamespace)('sticky'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: {
    zIndex: [Number, String],
    container: null,
    offsetTop: {
      type: [Number, String],
      default: 0
    },
    offsetBottom: {
      type: [Number, String],
      default: 0
    },
    position: {
      type: String,
      default: 'top'
    }
  },
  emits: ['scroll'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit,
        slots = _ref.slots;
    var root = (0, _vue.ref)();
    var scrollParent = (0, _use.useScrollParent)(root);
    var state = (0, _vue.reactive)({
      fixed: false,
      width: 0,
      // root width
      height: 0,
      // root height
      transform: 0
    });
    var offsetTop = (0, _vue.computed)(function () {
      return (0, _utils.unitToPx)(props.offsetTop);
    });
    var offsetBottom = (0, _vue.computed)(function () {
      return (0, _utils.unitToPx)(props.offsetBottom);
    });
    var style = (0, _vue.computed)(function () {
      if (!state.fixed) {
        return;
      }

      var style = {
        width: state.width + "px",
        height: state.height + "px"
      };

      if (state.transform) {
        style.transform = "translate3d(0, " + state.transform + "px, 0)";
      }

      if (props.zIndex !== undefined) {
        style.zIndex = +props.zIndex;
      }

      if (props.position === 'top') {
        style.top = offsetTop.value ? offsetTop.value + "px" : 0;
      } else {
        style.bottom = offsetBottom.value ? offsetBottom.value + "px" : 0;
      }

      return style;
    });

    var emitScrollEvent = function emitScrollEvent(scrollTop) {
      emit('scroll', {
        scrollTop: scrollTop,
        isFixed: state.fixed
      });
    };

    var onScroll = function onScroll() {
      if (!root.value || (0, _utils.isHidden)(root)) {
        return;
      }

      var container = props.container;
      var rootRect = (0, _use.useRect)(root);
      var containerRect = container == null ? void 0 : container.getBoundingClientRect();
      state.width = rootRect.width;
      state.height = rootRect.height;
      var scrollTop = (0, _utils.getScrollTop)(window);

      if (props.position === 'top') {
        // The sticky component should be kept inside the container element
        if (container) {
          var difference = containerRect.bottom - offsetTop.value - state.height;
          state.fixed = offsetTop.value > rootRect.top && containerRect.bottom > 0;
          state.transform = difference < 0 ? difference : 0;
        } else {
          state.fixed = offsetTop.value > rootRect.top;
        }
      } else if (props.position === 'bottom') {
        var clientHeight = document.documentElement.clientHeight;

        if (container) {
          var _difference = clientHeight - containerRect.top - offsetBottom.value - state.height;

          state.fixed = clientHeight - offsetBottom.value < rootRect.bottom && clientHeight > containerRect.top;
          state.transform = _difference < 0 ? -_difference : 0;
        } else {
          state.fixed = clientHeight - offsetBottom.value < rootRect.bottom;
        }
      }

      emitScrollEvent(scrollTop);
    };

    (0, _use.useEventListener)('scroll', onScroll, {
      target: scrollParent
    });
    (0, _useVisibilityChange.useVisibilityChange)(root, onScroll);
    return function () {
      var fixed = state.fixed,
          height = state.height,
          width = state.width;
      var rootStyle = {
        width: fixed ? width + "px" : undefined,
        height: fixed ? height + "px" : undefined
      };
      return (0, _vue.createVNode)("div", {
        "ref": root,
        "style": rootStyle
      }, [(0, _vue.createVNode)("div", {
        "class": bem({
          fixed: fixed
        }),
        "style": style.value
      }, [slots.default == null ? void 0 : slots.default()])]);
    };
  }
});

exports.default = _default;